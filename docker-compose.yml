version: '3.8'

services:
  api-gateway:
    container_name: api-gateway
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE: api-gateway
    ports:
      - '8080:8080'
    command: node dist/main.js
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_started
    env_file: .env
    environment:
      - API_GATEWAY_PORT=${API_GATEWAY_PORT}
    networks:
      - microservice-network

  user-service:
    container_name: user-service
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE: user-service
    ports:
      - '8081:8081'
      - '50051:50051'
    command: node dist/main.js
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    env_file: .env
    environment:
      - POSTGRES_DB=${USER_SERVICE_DB}
      - USER_SERVICE_PORT=${USER_SERVICE_PORT}
    networks:
      - microservice-network

  product-service:
    container_name: product-service
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE: product-service
    ports:
      - '8082:8082'
      - '50052:50052'
    command: node dist/main.js
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    env_file: .env
    environment:
      - POSTGRES_DB=${PRODUCT_SERVICE_DB}
      - PRODUCT_SERVICE_PORT=${PRODUCT_SERVICE_PORT}
    networks:
      - microservice-network

  logger-service:
    container_name: logger-service
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE: logger-service
    ports:
      - '8083:8083'
    command: node dist/main.js
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    env_file: .env
    environment:
      - LOGGER_SERVICE_PORT=${LOGGER_SERVICE_PORT}
    networks:
      - microservice-network

networks:
  microservice-network:
    driver: bridge
